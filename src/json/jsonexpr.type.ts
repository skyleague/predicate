/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

export interface AddExpr {
    '+': [NumberExpr, NumberExpr]
}

export interface AllExpr {
    all: [ValueExpr, BooleanExpr]
}

export interface AndExpr {
    and: BooleanExpr[]
}

export interface AnyExpr {
    any: [ValueExpr, BooleanExpr]
}

export type BooleanArrExpr = FromExpr | boolean[] | ValueItemExpr

export type BooleanExpr = FromExpr | boolean | BooleanFnExpr | ValueItemExpr

export type BooleanFnExpr =
    | IfExpr
    | AndExpr
    | OrExpr
    | EqualExpr
    | NotExpr
    | GtExpr
    | GteExpr
    | LtExpr
    | LteExpr
    | StartsWithExpr
    | EndsWithExpr
    | IncludesExpr
    | AllExpr
    | AnyExpr

export interface ConcatExpr {
    concat: [StringExpr, StringExpr]
}

export interface DivExpr {
    '/': [NumberExpr, NumberExpr]
}

export interface EndsWithExpr {
    endsWith: [StringExpr, StringExpr]
}

export interface EqualExpr {
    '==': [JSONExpr, JSONExpr]
}

export interface FilterExpr {
    filter: [ValueExpr, BooleanExpr]
}

export interface FromExpr {
    from: [string, string]
}

export interface GteExpr {
    '>=': [NumberExpr, NumberExpr]
}

export interface GtExpr {
    '>': [NumberExpr, NumberExpr]
}

export type HofExpr = MapExpr | FilterExpr

export interface IfExpr {
    if: [BooleanExpr, JSONExpr, JSONExpr]
}

export interface IncludesExpr {
    includes: [StringExpr, StringExpr]
}

export type JSONExpr =
    | ValueExpr
    | {
          [k: string]: JSONExpr | [JSONExpr, ...JSONExpr[]]
      }

export const JSONExpr = {
    validate: (await import('./schemas/json-expr.schema.js')).validate as ValidateFunction<JSONExpr>,
    get schema() {
        return JSONExpr.validate.schema
    },
    get errors() {
        return JSONExpr.validate.errors ?? undefined
    },
    is: (o: unknown): o is JSONExpr => JSONExpr.validate(o) === true,
    assert: (o: unknown) => {
        if (!JSONExpr.validate(o)) {
            throw new ValidationError(JSONExpr.errors ?? [])
        }
    },
} as const

export interface JSONExprDefinition {
    meta: {
        version: string
    }
    input?: {
        [k: string]: unknown | undefined
    }
    output: {
        [k: string]: JSONExpr | undefined
    }
}

export const JSONExprDefinition = {
    validate: (await import('./schemas/json-expr-definition.schema.js')).validate as ValidateFunction<JSONExprDefinition>,
    get schema() {
        return JSONExprDefinition.validate.schema
    },
    get errors() {
        return JSONExprDefinition.validate.errors ?? undefined
    },
    is: (o: unknown): o is JSONExprDefinition => JSONExprDefinition.validate(o) === true,
    assert: (o: unknown) => {
        if (!JSONExprDefinition.validate(o)) {
            throw new ValidationError(JSONExprDefinition.errors ?? [])
        }
    },
} as const

export interface LteExpr {
    '<=': [NumberExpr, NumberExpr]
}

export interface LtExpr {
    '<': [NumberExpr, NumberExpr]
}

export interface MapExpr {
    map: [ValueExpr, ValueExpr]
}

export interface MaxExpr {
    max: [NumberArrExpr]
}

export interface MinExpr {
    min: [NumberArrExpr]
}

export interface ModExpr {
    '%': [NumberExpr, NumberExpr]
}

export interface MulExpr {
    '*': [NumberExpr, NumberExpr]
}

export interface NotExpr {
    '~': BooleanExpr
}

export type NumberArrExpr = FromExpr | number[] | ValueItemExpr

export type NumberExpr = FromExpr | number | NumberFnExpr | ValueItemExpr

export type NumberFnExpr = AddExpr | SubExpr | MulExpr | DivExpr | ModExpr | MinExpr | MaxExpr

export interface OrExpr {
    or: BooleanExpr[]
}

export interface StartsWithExpr {
    startsWith: [StringExpr, StringExpr]
}

export type StringArrExpr = FromExpr | string[] | ValueItemExpr

export type StringExpr = FromExpr | string | StringFnExpr | ValueItemExpr

export type StringFnExpr = ConcatExpr

export interface SubExpr {
    '-': [NumberExpr, NumberExpr]
}

export type ValueExpr = HofExpr | NumberExpr | NumberArrExpr | StringExpr | StringArrExpr | BooleanExpr | BooleanArrExpr

export interface ValueItemExpr {
    value: string
}
