/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'

export interface Arithmetic {
    a: number
    b: number
}

export const Arithmetic = {
    validate: (await import('./schemas/arithmetic.schema.js')).validate as ValidateFunction<Arithmetic>,
    get schema() {
        return Arithmetic.validate.schema
    },
    get errors() {
        return Arithmetic.validate.errors ?? undefined
    },
    is: (o: unknown): o is Arithmetic => Arithmetic.validate(o) === true,
    assert: (o: unknown) => {
        if (!Arithmetic.validate(o)) {
            throw new ValidationError(Arithmetic.errors ?? [])
        }
    },
} as const

export interface MathFn {
    a: number[]
    b: Arithmetic[]
}

export const MathFn = {
    validate: (await import('./schemas/math-fn.schema.js')).validate as ValidateFunction<MathFn>,
    get schema() {
        return MathFn.validate.schema
    },
    get errors() {
        return MathFn.validate.errors ?? undefined
    },
    is: (o: unknown): o is MathFn => MathFn.validate(o) === true,
    assert: (o: unknown) => {
        if (!MathFn.validate(o)) {
            throw new ValidationError(MathFn.errors ?? [])
        }
    },
} as const
